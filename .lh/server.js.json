{
    "sourceFile": "server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1759120449966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759120583121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,102 @@\n+const express = require('express');\r\n+const app = express();\r\n+// Add exercise\r\n+app.post('/api/users/:_id/exercises', (req, res) => {\r\n+const _id = req.params._id;\r\n+const user = users.find(u => u._id === _id);\r\n+if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n+\r\n+\r\n+const description = req.body.description;\r\n+const duration = Number(req.body.duration);\r\n+const dateInput = req.body.date; // optional\r\n+\r\n+\r\n+if (!description || !duration) {\r\n+return res.status(400).json({ error: 'description and duration required' });\r\n+}\r\n+\r\n+\r\n+let dateObj;\r\n+if (!dateInput) {\r\n+dateObj = new Date();\r\n+} else {\r\n+dateObj = new Date(dateInput);\r\n+}\r\n+\r\n+\r\n+if (dateObj.toString() === 'Invalid Date') {\r\n+return res.status(400).json({ error: 'Invalid Date' });\r\n+}\r\n+\r\n+\r\n+const exercise = { description, duration, date: dateObj };\r\n+logs[_id].push(exercise);\r\n+\r\n+\r\n+res.json({\r\n+username: user.username,\r\n+description: exercise.description,\r\n+duration: exercise.duration,\r\n+date: exercise.date.toDateString(),\r\n+_id: user._id\r\n+});\r\n+});\r\n+\r\n+\r\n+// Get logs\r\n+app.get('/api/users/:_id/logs', (req, res) => {\r\n+const _id = req.params._id;\r\n+const user = users.find(u => u._id === _id);\r\n+if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n+\r\n+\r\n+let userLogs = logs[_id] || [];\r\n+\r\n+\r\n+const { from, to, limit } = req.query;\r\n+\r\n+\r\n+// Filter by from/to if present (expect yyyy-mm-dd)\r\n+if (from) {\r\n+const fromDate = new Date(from);\r\n+if (fromDate.toString() !== 'Invalid Date') {\r\n+userLogs = userLogs.filter(ex => ex.date >= fromDate);\r\n+}\r\n+}\r\n+if (to) {\r\n+const toDate = new Date(to);\r\n+if (toDate.toString() !== 'Invalid Date') {\r\n+userLogs = userLogs.filter(ex => ex.date <= toDate);\r\n+}\r\n+}\r\n+\r\n+\r\n+// Apply limit\r\n+let limitedLogs = userLogs;\r\n+if (limit) {\r\n+const lim = parseInt(limit);\r\n+if (!isNaN(lim)) limitedLogs = limitedLogs.slice(0, lim);\r\n+}\r\n+\r\n+\r\n+const formatted = limitedLogs.map(ex => ({\r\n+description: ex.description,\r\n+duration: ex.duration,\r\n+date: ex.date.toDateString()\r\n+}));\r\n+\r\n+\r\n+res.json({\r\n+username: user.username,\r\n+count: userLogs.length,\r\n+_id: user._id,\r\n+log: formatted\r\n+});\r\n+});\r\n+\r\n+\r\n+const PORT = process.env.PORT || 3000;\r\n+app.listen(PORT, () => {\r\n+console.log(`Server listening on port ${PORT}`);\r\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759120727058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,203 +1,107 @@\n const express = require('express');\r\n+const bodyParser = require('body-parser');\r\n+const { randomUUID } = require('crypto');\r\n+\r\n const app = express();\r\n-// Add exercise\r\n-app.post('/api/users/:_id/exercises', (req, res) => {\r\n-const _id = req.params._id;\r\n-const user = users.find(u => u._id === _id);\r\n-if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n+app.use(bodyParser.urlencoded({ extended: false }));\r\n+app.use(bodyParser.json());\r\n \r\n+// In-memory storage\r\n+const users = [];\r\n+const logs = {};\r\n \r\n-const description = req.body.description;\r\n-const duration = Number(req.body.duration);\r\n-const dateInput = req.body.date; // optional\r\n+// Create user\r\n+app.post('/api/users', (req, res) => {\r\n+  const username = req.body.username;\r\n+  if (!username) return res.status(400).json({ error: 'username required' });\r\n \r\n-\r\n-if (!description || !duration) {\r\n-return res.status(400).json({ error: 'description and duration required' });\r\n-}\r\n-\r\n-\r\n-let dateObj;\r\n-if (!dateInput) {\r\n-dateObj = new Date();\r\n-} else {\r\n-dateObj = new Date(dateInput);\r\n-}\r\n-\r\n-\r\n-if (dateObj.toString() === 'Invalid Date') {\r\n-return res.status(400).json({ error: 'Invalid Date' });\r\n-}\r\n-\r\n-\r\n-const exercise = { description, duration, date: dateObj };\r\n-logs[_id].push(exercise);\r\n-\r\n-\r\n-res.json({\r\n-username: user.username,\r\n-description: exercise.description,\r\n-duration: exercise.duration,\r\n-date: exercise.date.toDateString(),\r\n-_id: user._id\r\n+  const _id = randomUUID();\r\n+  const newUser = { username, _id };\r\n+  users.push(newUser);\r\n+  logs[_id] = [];\r\n+  res.json(newUser);\r\n });\r\n-});\r\n \r\n-\r\n-// Get logs\r\n-app.get('/api/users/:_id/logs', (req, res) => {\r\n-const _id = req.params._id;\r\n-const user = users.find(u => u._id === _id);\r\n-if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n-\r\n-\r\n-let userLogs = logs[_id] || [];\r\n-\r\n-\r\n-const { from, to, limit } = req.query;\r\n-\r\n-\r\n-// Filter by from/to if present (expect yyyy-mm-dd)\r\n-if (from) {\r\n-const fromDate = new Date(from);\r\n-if (fromDate.toString() !== 'Invalid Date') {\r\n-userLogs = userLogs.filter(ex => ex.date >= fromDate);\r\n-}\r\n-}\r\n-if (to) {\r\n-const toDate = new Date(to);\r\n-if (toDate.toString() !== 'Invalid Date') {\r\n-userLogs = userLogs.filter(ex => ex.date <= toDate);\r\n-}\r\n-}\r\n-\r\n-\r\n-// Apply limit\r\n-let limitedLogs = userLogs;\r\n-if (limit) {\r\n-const lim = parseInt(limit);\r\n-if (!isNaN(lim)) limitedLogs = limitedLogs.slice(0, lim);\r\n-}\r\n-\r\n-\r\n-const formatted = limitedLogs.map(ex => ({\r\n-description: ex.description,\r\n-duration: ex.duration,\r\n-date: ex.date.toDateString()\r\n-}));\r\n-\r\n-\r\n-res.json({\r\n-username: user.username,\r\n-count: userLogs.length,\r\n-_id: user._id,\r\n-log: formatted\r\n+// Get all users\r\n+app.get('/api/users', (req, res) => {\r\n+  res.json(users);\r\n });\r\n-});\r\n \r\n-\r\n-const PORT = process.env.PORT || 3000;\r\n-app.listen(PORT, () => {\r\n-console.log(`Server listening on port ${PORT}`);\r\n-});\n-const express = require('express');\r\n // Add exercise\r\n app.post('/api/users/:_id/exercises', (req, res) => {\r\n-const _id = req.params._id;\r\n-const user = users.find(u => u._id === _id);\r\n-if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n+  const _id = req.params._id;\r\n+  const user = users.find(u => u._id === _id);\r\n+  if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n \r\n+  const description = req.body.description;\r\n+  const duration = Number(req.body.duration);\r\n+  const dateInput = req.body.date;\r\n \r\n-const description = req.body.description;\r\n-const duration = Number(req.body.duration);\r\n-const dateInput = req.body.date; // optional\r\n+  if (!description || !duration) {\r\n+    return res.status(400).json({ error: 'description and duration required' });\r\n+  }\r\n \r\n+  let dateObj = dateInput ? new Date(dateInput) : new Date();\r\n+  if (dateObj.toString() === 'Invalid Date') {\r\n+    return res.status(400).json({ error: 'Invalid Date' });\r\n+  }\r\n \r\n-if (!description || !duration) {\r\n-return res.status(400).json({ error: 'description and duration required' });\r\n-}\r\n+  const exercise = { description, duration, date: dateObj };\r\n+  logs[_id].push(exercise);\r\n \r\n-\r\n-let dateObj;\r\n-if (!dateInput) {\r\n-dateObj = new Date();\r\n-} else {\r\n-dateObj = new Date(dateInput);\r\n-}\r\n-\r\n-\r\n-if (dateObj.toString() === 'Invalid Date') {\r\n-return res.status(400).json({ error: 'Invalid Date' });\r\n-}\r\n-\r\n-\r\n-const exercise = { description, duration, date: dateObj };\r\n-logs[_id].push(exercise);\r\n-\r\n-\r\n-res.json({\r\n-username: user.username,\r\n-description: exercise.description,\r\n-duration: exercise.duration,\r\n-date: exercise.date.toDateString(),\r\n-_id: user._id\r\n+  res.json({\r\n+    username: user.username,\r\n+    description: exercise.description,\r\n+    duration: exercise.duration,\r\n+    date: exercise.date.toDateString(),\r\n+    _id: user._id\r\n+  });\r\n });\r\n-});\r\n \r\n-\r\n // Get logs\r\n app.get('/api/users/:_id/logs', (req, res) => {\r\n-const _id = req.params._id;\r\n-const user = users.find(u => u._id === _id);\r\n-if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n+  const _id = req.params._id;\r\n+  const user = users.find(u => u._id === _id);\r\n+  if (!user) return res.status(400).json({ error: 'unknown user id' });\r\n \r\n+  let userLogs = logs[_id] || [];\r\n+  const { from, to, limit } = req.query;\r\n \r\n-let userLogs = logs[_id] || [];\r\n+  if (from) {\r\n\\ No newline at end of file\n+    const fromDate = new Date(from);\r\n+    if (fromDate.toString() !== 'Invalid Date') {\r\n+      userLogs = userLogs.filter(ex => ex.date >= fromDate);\r\n+    }\r\n+  }\r\n+  if (to) {\r\n+    const toDate = new Date(to);\r\n+    if (toDate.toString() !== 'Invalid Date') {\r\n+      userLogs = userLogs.filter(ex => ex.date <= toDate);\r\n+    }\r\n+  }\r\n \r\n+  let limitedLogs = userLogs;\r\n+  if (limit) {\r\n+    const lim = parseInt(limit);\r\n+    if (!isNaN(lim)) limitedLogs = limitedLogs.slice(0, lim);\r\n+  }\r\n \r\n-const { from, to, limit } = req.query;\r\n+  const formatted = limitedLogs.map(ex => ({\r\n+    description: ex.description,\r\n+    duration: ex.duration,\r\n+    date: ex.date.toDateString()\r\n+  }));\r\n \r\n-\r\n-// Filter by from/to if present (expect yyyy-mm-dd)\r\n-if (from) {\r\n-const fromDate = new Date(from);\r\n-if (fromDate.toString() !== 'Invalid Date') {\r\n-userLogs = userLogs.filter(ex => ex.date >= fromDate);\r\n-}\r\n-}\r\n-if (to) {\r\n-const toDate = new Date(to);\r\n-if (toDate.toString() !== 'Invalid Date') {\r\n-userLogs = userLogs.filter(ex => ex.date <= toDate);\r\n-}\r\n-}\r\n-\r\n-\r\n-// Apply limit\r\n-let limitedLogs = userLogs;\r\n-if (limit) {\r\n-const lim = parseInt(limit);\r\n-if (!isNaN(lim)) limitedLogs = limitedLogs.slice(0, lim);\r\n-}\r\n-\r\n-\r\n-const formatted = limitedLogs.map(ex => ({\r\n-description: ex.description,\r\n-duration: ex.duration,\r\n-date: ex.date.toDateString()\r\n-}));\r\n-\r\n-\r\n-res.json({\r\n-username: user.username,\r\n-count: userLogs.length,\r\n-_id: user._id,\r\n-log: formatted\r\n+  res.json({\r\n+    username: user.username,\r\n+    count: userLogs.length,\r\n+    _id: user._id,\r\n+    log: formatted\r\n+  });\r\n });\r\n-});\r\n \r\n-\r\n+// Start server\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n-console.log(`Server listening on port ${PORT}`);\r\n-});\n+  console.log(`Server listening on port ${PORT}`);\r\n+});\r\n"
                }
            ],
            "date": 1759120449966,
            "name": "Commit-0",
            "content": "const express = require('express');\r\n// Add exercise\r\napp.post('/api/users/:_id/exercises', (req, res) => {\r\nconst _id = req.params._id;\r\nconst user = users.find(u => u._id === _id);\r\nif (!user) return res.status(400).json({ error: 'unknown user id' });\r\n\r\n\r\nconst description = req.body.description;\r\nconst duration = Number(req.body.duration);\r\nconst dateInput = req.body.date; // optional\r\n\r\n\r\nif (!description || !duration) {\r\nreturn res.status(400).json({ error: 'description and duration required' });\r\n}\r\n\r\n\r\nlet dateObj;\r\nif (!dateInput) {\r\ndateObj = new Date();\r\n} else {\r\ndateObj = new Date(dateInput);\r\n}\r\n\r\n\r\nif (dateObj.toString() === 'Invalid Date') {\r\nreturn res.status(400).json({ error: 'Invalid Date' });\r\n}\r\n\r\n\r\nconst exercise = { description, duration, date: dateObj };\r\nlogs[_id].push(exercise);\r\n\r\n\r\nres.json({\r\nusername: user.username,\r\ndescription: exercise.description,\r\nduration: exercise.duration,\r\ndate: exercise.date.toDateString(),\r\n_id: user._id\r\n});\r\n});\r\n\r\n\r\n// Get logs\r\napp.get('/api/users/:_id/logs', (req, res) => {\r\nconst _id = req.params._id;\r\nconst user = users.find(u => u._id === _id);\r\nif (!user) return res.status(400).json({ error: 'unknown user id' });\r\n\r\n\r\nlet userLogs = logs[_id] || [];\r\n\r\n\r\nconst { from, to, limit } = req.query;\r\n\r\n\r\n// Filter by from/to if present (expect yyyy-mm-dd)\r\nif (from) {\r\nconst fromDate = new Date(from);\r\nif (fromDate.toString() !== 'Invalid Date') {\r\nuserLogs = userLogs.filter(ex => ex.date >= fromDate);\r\n}\r\n}\r\nif (to) {\r\nconst toDate = new Date(to);\r\nif (toDate.toString() !== 'Invalid Date') {\r\nuserLogs = userLogs.filter(ex => ex.date <= toDate);\r\n}\r\n}\r\n\r\n\r\n// Apply limit\r\nlet limitedLogs = userLogs;\r\nif (limit) {\r\nconst lim = parseInt(limit);\r\nif (!isNaN(lim)) limitedLogs = limitedLogs.slice(0, lim);\r\n}\r\n\r\n\r\nconst formatted = limitedLogs.map(ex => ({\r\ndescription: ex.description,\r\nduration: ex.duration,\r\ndate: ex.date.toDateString()\r\n}));\r\n\r\n\r\nres.json({\r\nusername: user.username,\r\ncount: userLogs.length,\r\n_id: user._id,\r\nlog: formatted\r\n});\r\n});\r\n\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\nconsole.log(`Server listening on port ${PORT}`);\r\n});"
        }
    ]
}